name: Build release

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Select the platform"
        required: true
        type: choice
        options:
          - linux-arm64
          - linux-x64
          - win-x64
          - mac-arm64
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build & Release - ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: win-x64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - platform: mac-arm64
            os: macOS-latest
            target: aarch64-apple-darwin
          - platform: linux-x64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - platform: linux-arm64
            os: ubuntu-latest
            target: aarch64-unknown-linux-musl
    environment: PROD
    env:
      CARGO_SERVER_SSL_CA: ${{ secrets.SERVER_SSL_CA }}
      CARGO_SERVER_SSL_CERT: ${{ secrets.SERVER_SSL_CERT }}
      CARGO_SERVER_SSL_KEY: ${{ secrets.SERVER_SSL_KEY }}
      FILENAME: tagoio-relay-${{ matrix.platform }}

    steps:
      # Preparation Steps
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain and components
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Setup Cache
        uses: Swatinem/rust-cache@v2

      - name: Create empty .env file
        run: touch .env

      - name: Install cross (Linux ARM64 only)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo install cross

        ####
        ## Windows Only Steps
        ####
      - name: Install NASM (Windows only)
        if: matrix.os == 'windows-latest'
        uses: ilammy/setup-nasm@v1

      - name: Build Binary (Windows only)
        if: matrix.os == 'windows-latest'
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: "build"
          target: "${{ matrix.TARGET }}"
          toolchain: "stable"
          args: "--locked --release"
          strip: true

        ####
        # Linux and macOS Steps
        ####
      - name: Build Binary (Linux and macOS)
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]; then
            cross build --locked --release --target ${{ matrix.target }}
          else
            cargo build --locked --release --target ${{ matrix.target }}
          fi

      - name: Run tests
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]; then
            cross test --verbose --target ${{ matrix.target }}
          else
            cargo test --verbose
          fi

      # Package the binary for the current OS (zip for Windows, tar.gz for others)
      - name: Package Binary
        shell: bash
        run: |
          cd target/${{ matrix.target }}/release
          if [ "${{ matrix.os }}" == "windows-latest" ]; then
            7z a ../../../${{ env.filename }}.zip tagoio-relay.exe
          else
            tar cvf - tagoio-relay | gzip > ../../../${{ env.FILENAME }}.tar.gz
          fi

      # Generate SHA-256 checksum if this is a release (Ignoring windows for now)
      - name: Generate SHA-256 checksum
        if: github.event_name == 'release' && matrix.os != 'windows-latest'
        run: shasum -a 256 ${{ env.FILENAME }}.tar.gz > ${{ env.FILENAME }}.tar.gz.sha256
        shell: bash

      # Upload to GitHub Release if this is a release
      - name: Upload to Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: |
            if [ "${{ matrix.os }}" == "windows-latest" ]; then
              ./${{ env.FILENAME }}.zip
            else
              ./${{ env.FILENAME }}.tar.gz
              ./${{ env.FILENAME }}.tar.gz.sha256
            fi

      # Upload artifacts if this is not a release
      - name: Upload artifact
        if: github.event_name != 'release'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.FILENAME }}
          path: |
            if [ "${{ matrix.os }}" == "windows-latest" ]; then
              ./${{ env.FILENAME }}.zip
            else
              ./${{ env.FILENAME }}.tar.gz
            fi
